---
- name: Generating Kubernetes Configuration Files for Authentication
  hosts: controller-0
  vars:
    loadbalancer_ip: "{{ hostvars['loadbalancer-0']['ansible_host'] }}"
  tasks:
  - name: Create Worker Kubeconfigs
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ loadbalancer_ip }}:6443 \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config set-credentials system:node:{{ item }} \
        --client-certificate={{ cert_path }}/{{ item }}.pem \
        --client-key={{ cert_path }}/{ item }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \ --user=system:node:{{ item }} \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config use-context default --kubeconfig={{ item }}.kubeconfig
    loop: "{{ query('inventory_hostnames', 'worker*') }}"

  - name: Create Admin Kubeconfig
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config set-credentials system:node:{{ item }} \
        --client-certificate={{ cert_path }}/{{ item }}.pem \
        --client-key={{ cert_path }}/{ item }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user={{ item }} \
        --kubeconfig={{ item }}.kubeconfig

      kubectl config use-context default --kubeconfig={{ item }}.kubeconfig
    with_items:
    - admin

  - name: Create other Kubeconfigs
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ item.server }}:6443 \
        --kubeconfig={{ item.name }}.kubeconfig

      kubectl config set-credentials system:node:{{ item.name }} \
        --client-certificate={{ cert_path }}/{{ item.name }}.pem \
        --client-key={{ cert_path }}/{ item.name }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ item.name }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:{{ item.name }} \
        --kubeconfig={{ item.name }}.kubeconfig

      kubectl config use-context default --kubeconfig={{ item.name }}.kubeconfig
    with_items:
    - { name: kube-proxy, server: "{{ loadbalancer_ip }}" }
    - { name: kube-scheduler, server: 127.0.0.1 }
    - { name: kube-controller-manager, server: 127.0.0.1 }

- name: Distribute Kubeconfigs
  hosts: all
  user: ansible
  vars:
    worker_kubeconfigs:
    - "{{ inventory_hostname }}"
    - kube-proxy
    controller_kubeconfigs:
    - admin
    - kube-scheduler
    - kube-controller-manager
  tasks:
  - name: distribute worker kubeconfigs
    synchronize:
      src: "{{ kubeconfig_path }}/{{ item }}.kubeconfig"
      dest: "{{ kubeconfig_dest_path }}/{{ item }}.kubeconfig"
    delegate_to: controller-0
    with_items:
    - "{{ worker_kubeconfigs }}"
    when: "'worker' in inventory_hostname"

  - name: distribute controller kubeconfigs
    synchronize:
      src: "{{ kubeconfig_path }}/{{ item }}.kubeconfig"
      dest: "{{ kubeconfig_dest_path }}/{{ item }}.kubeconfig"
    delegate_to: controller-0
    with_items:
    - "{{ controller_kubeconfigs }}"
    when: "'controller' in inventory_hostname"
