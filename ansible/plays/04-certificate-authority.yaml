---
- name: Provisioning a CA and Generating TLS Certificates
  hosts: controller-0
  vars:
    cert_path: /var/tmp
    kubernetes_hostnames:
    - "kubernetes"
    - "kubernetes.default"
    - "kubernetes.default.svc"
    - "kubernetes.default.svc.cluster"
    - "kubernetes.svc.cluster.local"

  tasks:
  - name: Add local Hostnames to Kubernetes Hostnames
    set_fact:
      kubernetes_hostnames: "{{ kubernetes_hostnames + [ item ] }}"
    loop: "{{ query('inventory_hostnames', 'all:!worker*') }}"

  - name: init iplist
    set_fact:
      api_iplist: []

  - name: Set IP List
    set_fact:
      api_iplist: "{{ api_iplist + [ hostvars[item]['ansible_host'] ] }}"
    loop: "{{ query('inventory_hostnames', 'all:!worker*') }}"

  - name: Create SAN String IPs
    set_fact:
      api_sans: "IP:{{ ',IP:'.join((api_iplist)) }},DNS:{{ ',DNS:'.join((kubernetes_hostnames)) }}"

  - name: Generate Private keys
    community.crypto.openssl_privatekey:
      path: "{{ cert_path }}/{{ item }}-key.pem"
    with_items:
    - "ca"
    - "admin"
    - "kube-controller-manager"
    - "kube-proxy"
    - "kube-scheduler"
    - "kubernetes"
    - "service-account"
    - "{{ query('inventory_hostnames', 'worker*') }}"

  - name: Create CSRs
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ item.name }}.csr"
      privatekey_path: "{{ cert_path }}/{{ item.name }}-key.pem"
      common_name: "Kubernetes"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "{{ item.org }}"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
    with_items:
    - { name: "ca", org: "Kubernetes" }
    - { name: "admin", org: "system:masters" }
    - { name: "kube-controller-manager", org: "system:kube-controller-manager" }
    - { name: "kube-proxy", org: "system:node-proxier" }
    - { name: "kube-scheduler", org: "kube-scheduler" }
    - { name: "service-account", org: "Kubernetes" }

  - name: Create Node CSRs
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ item }}.csr"
      privatekey_path: "{{ cert_path }}/{{ item }}-key.pem"
      common_name: "Kubernetes"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "system:nodes"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
      subject_alt_name: "IP:{{ hostvars[item]['ansible_host'] }},DNS:{{ item }}"
    loop: "{{ query('inventory_hostnames', 'worker*') }}"

  - name: Create API Server CSR
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/kubernetes.csr"
      privatekey_path: "{{ cert_path }}/kubernetes-key.pem"
      common_name: "Kubernetes"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "system:nodes"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
      subject_alt_name: "{{ api_sans }}"

  - name: Provisiong CA
    community.crypto.x509_certificate:
      path: "{{ cert_path }}/ca.pem"
      provider: selfsigned
      privatekey_path: "{{ cert_path }}/ca-key.pem"
      csr_path: "{{ cert_path }}/ca.csr"

  - name: Create Certs
    community.crypto.x509_certificate:
      path: "{{ cert_path }}/{{ item }}.pem"
      csr_path: "{{ cert_path }}/{{ item }}.csr"
      ownca_path: "{{ cert_path }}/ca.pem"
      ownca_privatekey_path: "{{ cert_path }}/ca-key.pem"
      provider: ownca
      return_content: true
    with_items:
    - "admin"
    - "kube-controller-manager"
    - "kube-proxy"
    - "kube-scheduler"
    - "kubernetes"
    - "service-account"
    - "{{ query('inventory_hostnames', 'worker*') }}"

- name: Distribute Certs
  hosts: all
  user: ansible
  vars:
    worker_certs:
    - ca
    - ca-key
    - "{{ inventory_hostname }}"
    - "{{ inventory_hostname }}-key"
    controller_certs:
    - ca
    - ca-key
    - kubernetes
    - kubernetes-key
    - service-account
    - service-account-key
    cert_path: /var/tmp
    cert_dest_path: "/home/{{ ansible_user }}"
  tasks:
  - name: synchronize worker certs
    synchronize:
      src: "{{ cert_path }}/{{ item }}.pem"
      dest: "{{ cert_dest_path }}/{{ item }}.pem"
    delegate_to: controller-0
    with_items:
    - "{{ worker_certs }}"
    when: "'worker' in inventory_hostname"

  - name: synchronize controller certs
    synchronize:
      src: "{{ cert_path }}/{{ item }}.pem"
      dest: "{{ cert_dest_path }}/{{ item }}.pem"
    delegate_to: controller-0
    with_items:
    - "{{ controller_certs }}"
    when: "'controller' in inventory_hostname"
