---
- name: Bootstrapping the Kubernetes Control Plane
  hosts: controller
  become: true
  handlers:
  - name: restart nginx
    service:
      name: nginx
      state: restarted
  - name: restart kube-apiserver
    systemd:
      name: kube-apiserver
      state: restarted
      daemon-reload: true
  - name: restart kube-controller-manager
    systemd:
      name: kube-controller-manager
      state: restarted
      daemon-reload: true
  - name: restart kube-scheduler
    systemd:
      name: kube-scheduler
      state: restarted
      daemon-reload: true

  tasks:
  - name: Create kubernetes dirs
    ansible.builtin.file:
      path: "{{ item }}"
      recurse: true
      state: directory
    with_items:
    - "{{ kube_dirs }}"

  - name: Download and Install the Kubernetes Controller Binaries
    ansible.builtin.get_url:
      url: "{{ item }}"
      dest: "{{ bin_path }}/"
      mode: '0755'
    with_items:
    - "{{ kube_controller_bin_urls }}"

  - name: Configure Kubernetes API Server
    ansible.builtin.copy:
      remote_src: true
      src: "{{ data_dir }}/{{ item }}"
      dest: "/var/lib/kubernetes/"
    with_items:
    - ca.pem
    - ca-key.pem
    - kubernetes-key.pem
    - kubernetes.pem
    - service-account-key.pem
    - service-account.pem
    - encryption-config.yaml

  - name: Service Preparation
    block:
    - name: init initial cluster variable
      ansible.builtin.set_fact:
        etcd_servers: [ ]
    - name: Initial Cluster Parameter
      ansible.builtin.set_fact:
        etcd_servers: "{{ etcd_servers + [ 'https://' + hostvars[item]['ansible_facts'][internal_interface]['ipv4']['address'] | default(ansible_host) + ':2379' ] }}"
      loop: "{{ query('inventory_hostnames', 'controller') }}"

    - name: Initial Cluster Parameter String
      ansible.builtin.set_fact:
        etcd_servers_string: "{{ ','.join(etcd_servers) }}"

    - name: Create kube-apiserver systemd unit file
      ansible.builtin.template:
        src: etc/systemd/system/kube-apiserver.service.j2
        dest: /etc/systemd/system/kube-apiserver.service
      notify: restart kube-apiserver
    tags:
    - systemd

  - name: Move the kube-controller-manager kubeconfig into place
    ansible.builtin.copy:
      remote_src: true
      src: "{{ data_dir }}/{{ item }}"
      dest: "/var/lib/kubernetes/"
    with_items:
    - kube-controller-manager.kubeconfig

  - name: Create kube-controller-manager systemd unit file
    ansible.builtin.template:
      src: etc/systemd/system/kube-controller-manager.service.j2
      dest: /etc/systemd/system/kube-controller-manager.service
    notify: restart kube-controller-manager

  - name: Move the kube-scheduler kubeconfig into place
    ansible.builtin.copy:
      remote_src: true
      src: "{{ data_dir }}/{{ item }}"
      dest: "/var/lib/kubernetes/"
    with_items:
    - kube-scheduler.kubeconfig

  - name: Create the kube-scheduler.yaml configuration file
    ansible.builtin.template:
      src: etc/kubernetes/config/kube-scheduler.yaml.j2
      dest: /etc/kubernetes/config/kube-scheduler.yaml

  - name: Create kube-scheduler systemd unit file
    ansible.builtin.template:
      src: etc/systemd/system/kube-scheduler.service.j2
      dest: /etc/systemd/system/kube-scheduler.service
    notify: restart kube-scheduler

  - name: enable services
    ansible.builtin.service:
      name: "{{ item }}"
      state: started
      enabled: true
    with_items:
    - kube-apiserver
    - kube-controller-manager
    - kube-scheduler

  - name: Enable HTTP Health Checks
    block:
    - name: Install basic web server to handle HTTP health checks
      apt:
        name: nginx
        state: present
        update_cache: true
    - name: Configure health check in nginx
      template:
        src: etc/nginx/sites-available/kubernetes.default.svc.cluster.local.j2
        dest: /etc/nginx/sites-available/kubernetes.default.svc.cluster.local
      notify:
      - restart nginx
    - name: Link nginx config to sites-enabled
      file:
        src: /etc/nginx/sites-available/kubernetes.default.svc.cluster.local
        dest: /etc/nginx/sites-enabled/kubernetes.default.svc.cluster.local
        state: link
    - name: enable nginx
      service:
        name: nginx
        enabled: true
        state: started
    tags:
    - healthcheck

- name: RBAC for Kubelet Authorization
  hosts: controller[0]
  tasks:
  - name: Create ClusterRole
    shell: |
      cat << EOF | kubectl apply --kubeconfig {{ data_dir }}/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRole
      metadata:
        annotations:
          rbac.authorization.kubernetes.io/autoupdate: "true"
        labels:
          kubernetes.io/bootstrapping: rbac-defaults
        name: system:kube-apiserver-to-kubelet
      rules:
        - apiGroups:
            - ""
          resources:
            - nodes/proxy
            - nodes/stats
            - nodes/log
            - nodes/spec
            - nodes/metrics
          verbs:
            - "*"
      EOF
    tags:
    - rbac
  - name: Create ClusterRoleBinding
    shell: |
      cat << EOF | kubectl apply --kubeconfig {{ data_dir }}/admin.kubeconfig -f -
      apiVersion: rbac.authorization.k8s.io/v1
      kind: ClusterRoleBinding
      metadata:
        name: system:kube-apiserver
        namespace: ""
      roleRef:
        apiGroup: rbac.authorization.k8s.io
        kind: ClusterRole
        name: system:kube-apiserver-to-kubelet
      subjects:
        - apiGroup: rbac.authorization.k8s.io
          kind: User
          name: kubernetes
      EOF
    tags:
    - rbac

- name: The Kubernetes Frontend Load Balancer
  hosts: loadbalancer
  become: true
  handlers:
  - name: restart haproxy
    ansible.builtin.service:
      name: haproxy
      state: restarted

  tasks:
  - name: Install HAProxy
    ansible.builtin.apt:
      name: haproxy
      state: present
      update_cache: true
    when: ansible_os_family == "Debian"

  - name: Install HAProxy for not Debian Distributions
    ansible.builtin.apt:
      name: haproxy
      state: present
      update_cache: true
    when: ansible_os_family != "Debian"

  - name: Enable HAProxy
    ansible.builtin.service:
      name: haproxy
      enabled: true
      state: started

  - name: Configure HAProxy
    ansible.builtin.template:
      src: etc/haproxy/haproxy.cfg.j2
      dest: /etc/haproxy/haproxy.cfg
    notify:
    - restart haproxy
