---
- name: Provisioning a CA and Generating TLS Certificates
  hosts: controller[0]
  tags:
  - create_certs
  tasks:
  - name: Create cfssl files
    copy:
      src: files/{{ item }}
      dest: "{{ data_dir }}/{{ item }}"
    loop:
    - ca-config.json
    - ca-csr.json
    register: cfssljson

  - name: Create CA with cfssl
    shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    args:
      chdir: "{{ data_dir }}"
    when: cfssljson.changed

  - name: Add local Hostnames to Kubernetes Hostnames
    ansible.builtin.set_fact:
      kubernetes_hostnames: "{{ kubernetes_hostnames + [ item ] }}"
    loop: "{{ query('inventory_hostnames', 'controller:loadbalancer') }}"

  - name: init iplist
    ansible.builtin.set_fact:
      api_iplist: ['127.0.0.1', "{{ api_clusterip }}"]

  - name: Set IP List
    ansible.builtin.set_fact:
      api_iplist: "{{ api_iplist + [ hostvars[item]['ansible_facts'][internal_interface]['ipv4']['address'] | default(ansible_host) ] }}"
    loop: "{{ query('inventory_hostnames', 'loadbalancer:controller') }}"

  - name: Create SAN String IPs
    ansible.builtin.set_fact:
      api_sans: "IP:{{ ',IP:'.join((api_iplist)) }},DNS:{{ ',DNS:'.join((kubernetes_hostnames)) }}"

  - name: Add Worker to cert names
    ansible.builtin.set_fact:
      cert_files: "{{ cert_files + [ item ] }}"
    loop: "{{ query('inventory_hostnames', 'worker') }}"


  - name: Generate Private keys
    community.crypto.openssl_privatekey:
      path: "{{ cert_path }}/{{ item }}-key.pem"
    loop: "{{ cert_files }}"

  - name: Create CSRs
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ item.name }}.csr"
      privatekey_path: "{{ cert_path }}/{{ item.name }}-key.pem"
      common_name: "{{ item.cn }}"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "{{ item.org }}"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
    loop:
    - { name: "admin", org: "system:masters", cn: "admin" }
    - { name: "kube-controller-manager", org: "system:kube-controller-manager", cn: "system:kube-controller-manager" }
    - { name: "kube-proxy", org: "system:node-proxier", cn: "system:kube-proxy" }
    - { name: "kube-scheduler", org: "kube-scheduler", cn: "system:kube-scheduler" }
    - { name: "service-account", org: "Kubernetes", cn: "service-accounts" }

  - name: Create Node CSRs
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ item }}.csr"
      privatekey_path: "{{ cert_path }}/{{ item }}-key.pem"
      common_name: "system:node:{{ item }}"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "system:nodes"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
      subject_alt_name: "IP:{{ hostvars[item]['ansible_facts'][internal_interface]['ipv4']['address'] | default(ansible_host) }},DNS:{{ item }}"
    loop: "{{ query('inventory_hostnames', 'worker') }}"

  - name: Create API Server CSR
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/kubernetes.csr"
      privatekey_path: "{{ cert_path }}/kubernetes-key.pem"
      common_name: "kubernetes"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "Kubernetes"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
      subject_alt_name: "{{ api_sans }}"

  - name: Create Certs
    community.crypto.x509_certificate:
      path: "{{ cert_path }}/{{ item }}.pem"
      csr_path: "{{ cert_path }}/{{ item }}.csr"
      ownca_path: "{{ cert_path }}/ca.pem"
      ownca_privatekey_path: "{{ cert_path }}/ca-key.pem"
      provider: ownca
      return_content: true
    loop: "{{ cert_files }}"

- name: Distribute Certs
  hosts: worker:controller
  gather_facts: false
  tags:
  - distribute_certs
  tasks:
  - name: Slurp Certificates
    delegate_to: "{{ groups['controller'] | first }}"
    slurp:
      src: "{{ cert_path }}/{{ cert_filename }}.pem"
    loop: "{{ slurp_certs }}"
    register: cert_content
    loop_control:
      loop_var: cert_filename

  - name: Copy Certificates
    copy:
      dest: "{{ cert_path }}/{{ item.cert_filename }}.pem"
      content: "{{ item.content | b64decode }}"
    loop: "{{ cert_content['results'] }}"
