---
- name: Debug playbook
  hosts: worker
  vars:
    #cert_path: ~/tmp/
    cert_files:
    - "admin"
    - "kube-controller-manager"
    - "kube-proxy"
    - "kube-scheduler"
    - "kubernetes"
    - "service-account"
  tasks:
  - name: Create cfssl files
    copy:
      src: files/{{ item }}
      dest: "{{ cert_path }}/{{ item }}"
    with_items:
    - ca-config.json
    - ca-csr.json
    register: cfssljson

  - name: Create CA with cfssl
    shell: cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    args:
      chdir: "{{ cert_path }}"
    when: cfssljson.changed
  - name: Add worker to item list
    set_fact:
      cert_files: "{{ cert_files + [ item ] }}"
    loop: "{{ query('inventory_hostnames', 'worker') }}"
    tags: slurp

  - name: Generate Private keys
    community.crypto.openssl_privatekey:
      path: "{{ cert_path}}/{{ item }}-key.pem"
    loop: "{{ cert_files }}"

  - debug: var=ansible_user

  - name: Create Node CSRs
    community.crypto.openssl_csr:
      path: "{{ cert_path }}/{{ item }}.csr"
      privatekey_path: "{{ cert_path }}/{{ item }}-key.pem"
      common_name: "system:node:{{ item }}"
      country_name: "US"
      locality_name: "Portland"
      organization_name: "system:nodes"
      organizational_unit_name: "Kubernetes The Hard Way"
      state_or_province_name: "Oregon"
    loop: "{{ cert_files }}"

  - name: Create Certs
    community.crypto.x509_certificate:
      path: "{{ cert_path }}/{{ item }}.pem"
      csr_path: "{{ cert_path }}/{{ item }}.csr"
      ownca_path: "{{ cert_path }}/ca.pem"
      ownca_privatekey_path: "{{ cert_path }}/ca-key.pem"
      provider: ownca
      return_content: true
    loop: "{{ cert_files }}"

      #  - name: register certs in facts
      #    set_fact:
      #      "content_{{ item | replace('-','_') }}_cert": "{{lookup('file', '~/tmp/{{ item }}.pem') }}"
      #    loop: "{{ cert_files }}"
      #    tags:
      #    - copycerts
      #
      #
      #  - name: register keys in facts
      #    set_fact:
      #      "content_{{ item | replace('-','_') }}_key": "{{ lookup('file', '~/tmp/{{ item }}-key.pem') }}"
      #    loop: "{{ cert_files }}"
      #    tags:
      #    - copycerts

- name: Distribute Worker certs
  hosts: worker
  tags:
  - distribute
  vars:
    cert_files:
    - ca
    - "{{ inventory_hostname }}"
  tasks:
  - name: slurp keys
    delegate_to: localhost
    slurp:
      src: "{{ cert_path }}/{{ static_file }}-key.pem"
    loop: "{{ cert_files }}"
    register: "reg_keys"
    loop_control:
      loop_var: static_file

  - name: Copy key content
    copy:
      dest: "{{ cert_path }}/{{ item.static_file }}-key.pem"
      content: "{{ item.content | b64decode }}"
    loop: "{{ reg_keys['results'] }}"
    when: item.static_file == ansible_nodename
    no_log: True

  - name: slurp certs
    delegate_to: localhost
    slurp:
      src: "{{ cert_path }}/{{ static_file }}.pem"
    loop: "{{ cert_files }}"
    register: "reg_certs"
    loop_control:
      loop_var: static_file

  - name: Copy key content
    copy:
      dest: "{{ cert_path }}/{{ item.static_file }}.pem"
      content: "{{ item.content | b64decode }}"
    loop: "{{ reg_certs['results'] }}"

  - name: Slurp Worker Keys
    delegate_to: "{{ groups['controller'] | first }}"
    slurp:
      src: "{{ cert_path }}/{{ cert_filename }}-key.pem"
    register: key_content
    loop: "{{ query('inventory_hostnames', inventory_hostname) }}"
    tags: loopi
    loop_control:
      loop_var: cert_filename

  - debug: var=item
    loop: "{{ query('inventory_hostnames', inventory_hostname) }}"
    tags: loopi2
