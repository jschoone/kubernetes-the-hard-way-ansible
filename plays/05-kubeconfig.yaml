---
- name: Gather facts
  hosts: loadbalancer

- name: Generating Kubernetes Configuration Files for Authentication
  hosts: controller[0]
  tasks:
  - name: Create Worker Kubeconfigs
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ loadbalancer_ip }}:6443 \
        --kubeconfig={{ data_dir }}/{{ item }}.kubeconfig

      kubectl config set-credentials system:node:{{ item }} \
        --client-certificate={{ cert_path }}/{{ item }}.pem \
        --client-key={{ cert_path }}/{{ item }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ data_dir }}/{{ item }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:node:{{ item }} \
        --kubeconfig={{ data_dir }}/{{ item }}.kubeconfig

      kubectl config use-context default --kubeconfig={{ data_dir }}/{{ item }}.kubeconfig
    loop: "{{ query('inventory_hostnames', 'worker') }}"

  - name: Create Admin Kubeconfig
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://127.0.0.1:6443 \
        --kubeconfig={{ data_dir }}/admin.kubeconfig

      kubectl config set-credentials admin \
        --client-certificate={{ cert_path }}/admin.pem \
        --client-key={{ cert_path }}/admin-key.pem \
        --embed-certs=true \
        --kubeconfig={{ data_dir }}/admin.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=admin \
        --kubeconfig={{ data_dir }}/admin.kubeconfig

      kubectl config use-context default --kubeconfig={{ data_dir }}/admin.kubeconfig
    tags:
    - admin

  - name: Create other Kubeconfigs
    ansible.builtin.shell: |
      kubectl config set-cluster kubernetes-the-hard-way \
        --certificate-authority={{ cert_path }}/ca.pem \
        --embed-certs=true \
        --server=https://{{ item.server }}:6443 \
        --kubeconfig={{ data_dir }}/{{ item.name }}.kubeconfig

      kubectl config set-credentials system:{{ item.name }} \
        --client-certificate={{ cert_path }}/{{ item.name }}.pem \
        --client-key={{ cert_path }}/{{ item.name }}-key.pem \
        --embed-certs=true \
        --kubeconfig={{ data_dir }}/{{ item.name }}.kubeconfig

      kubectl config set-context default \
        --cluster=kubernetes-the-hard-way \
        --user=system:{{ item.name }} \
        --kubeconfig={{ data_dir }}/{{ item.name }}.kubeconfig

      kubectl config use-context default --kubeconfig={{ data_dir }}/{{ item.name }}.kubeconfig
    with_items:
    - { name: kube-proxy, server: "{{ loadbalancer_ip }}" }
    - { name: kube-scheduler, server: 127.0.0.1 }
    - { name: kube-controller-manager, server: 127.0.0.1 }
- name: Distribute Kubeconfigs
  hosts: worker:controller
  user: ansible
  tasks:
  - name: Slurp Kubeconfigs
    delegate_to: "{{ groups['controller'] | first }}"
    slurp:
      src: "{{ cert_path }}/{{ cert_filename }}.kubeconfig"
    loop: "{{ slurp_kubeconfigs }}"
    register: cert_content
    loop_control:
      loop_var: cert_filename

  - name: Copy Kubeconfigs
    copy:
      dest: "{{ cert_path }}/{{ item.cert_filename }}.kubeconfig"
      content: "{{ item.content | b64decode }}"
    loop: "{{ cert_content['results'] }}"
